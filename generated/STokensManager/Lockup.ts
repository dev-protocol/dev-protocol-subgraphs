// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Lockedup extends ethereum.Event {
  get params(): Lockedup__Params {
    return new Lockedup__Params(this);
  }
}

export class Lockedup__Params {
  _event: Lockedup;

  constructor(event: Lockedup) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _property(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateCap extends ethereum.Event {
  get params(): UpdateCap__Params {
    return new UpdateCap__Params(this);
  }
}

export class UpdateCap__Params {
  _event: UpdateCap;

  constructor(event: UpdateCap) {
    this._event = event;
  }

  get _cap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdrew extends ethereum.Event {
  get params(): Withdrew__Params {
    return new Withdrew__Params(this);
  }
}

export class Withdrew__Params {
  _event: Withdrew;

  constructor(event: Withdrew) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _property(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Lockup__calculateCumulativeRewardPricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Lockup__calculateRewardAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Lockup__getLockedupPropertiesResultValue0Struct extends ethereum.Tuple {
  get property(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class Lockup extends ethereum.SmartContract {
  static bind(address: Address): Lockup {
    return new Lockup("Lockup", address);
  }

  calculateCumulativeRewardPrices(): Lockup__calculateCumulativeRewardPricesResult {
    let result = super.call(
      "calculateCumulativeRewardPrices",
      "calculateCumulativeRewardPrices():(uint256,uint256,uint256,uint256)",
      []
    );

    return new Lockup__calculateCumulativeRewardPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_calculateCumulativeRewardPrices(): ethereum.CallResult<
    Lockup__calculateCumulativeRewardPricesResult
  > {
    let result = super.tryCall(
      "calculateCumulativeRewardPrices",
      "calculateCumulativeRewardPrices():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lockup__calculateCumulativeRewardPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  calculateRewardAmount(
    _property: Address
  ): Lockup__calculateRewardAmountResult {
    let result = super.call(
      "calculateRewardAmount",
      "calculateRewardAmount(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return new Lockup__calculateRewardAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateRewardAmount(
    _property: Address
  ): ethereum.CallResult<Lockup__calculateRewardAmountResult> {
    let result = super.tryCall(
      "calculateRewardAmount",
      "calculateRewardAmount(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lockup__calculateRewardAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calculateWithdrawableInterestAmountByPosition(_tokenId: BigInt): BigInt {
    let result = super.call(
      "calculateWithdrawableInterestAmountByPosition",
      "calculateWithdrawableInterestAmountByPosition(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_calculateWithdrawableInterestAmountByPosition(
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateWithdrawableInterestAmountByPosition",
      "calculateWithdrawableInterestAmountByPosition(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeGlobalReward(): BigInt {
    let result = super.call(
      "cumulativeGlobalReward",
      "cumulativeGlobalReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cumulativeGlobalReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeGlobalReward",
      "cumulativeGlobalReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeHoldersRewardCap(): BigInt {
    let result = super.call(
      "cumulativeHoldersRewardCap",
      "cumulativeHoldersRewardCap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cumulativeHoldersRewardCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeHoldersRewardCap",
      "cumulativeHoldersRewardCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositToPosition(_tokenId: BigInt, _amount: BigInt): boolean {
    let result = super.call(
      "depositToPosition",
      "depositToPosition(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_depositToPosition(
    _tokenId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositToPosition",
      "depositToPosition(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositToProperty(_property: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "depositToProperty",
      "depositToProperty(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_property),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositToProperty(
    _property: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositToProperty",
      "depositToProperty(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_property),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockedupProperties(): Array<
    Lockup__getLockedupPropertiesResultValue0Struct
  > {
    let result = super.call(
      "getLockedupProperties",
      "getLockedupProperties():((address,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      Lockup__getLockedupPropertiesResultValue0Struct
    >();
  }

  try_getLockedupProperties(): ethereum.CallResult<
    Array<Lockup__getLockedupPropertiesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getLockedupProperties",
      "getLockedupProperties():((address,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Lockup__getLockedupPropertiesResultValue0Struct>()
    );
  }

  initialCumulativeHoldersRewardCap(param0: Address): BigInt {
    let result = super.call(
      "initialCumulativeHoldersRewardCap",
      "initialCumulativeHoldersRewardCap(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_initialCumulativeHoldersRewardCap(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialCumulativeHoldersRewardCap",
      "initialCumulativeHoldersRewardCap(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCumulativeHoldersPriceCap(): BigInt {
    let result = super.call(
      "lastCumulativeHoldersPriceCap",
      "lastCumulativeHoldersPriceCap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCumulativeHoldersPriceCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCumulativeHoldersPriceCap",
      "lastCumulativeHoldersPriceCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCumulativeHoldersRewardAmountPerProperty(param0: Address): BigInt {
    let result = super.call(
      "lastCumulativeHoldersRewardAmountPerProperty",
      "lastCumulativeHoldersRewardAmountPerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCumulativeHoldersRewardAmountPerProperty(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCumulativeHoldersRewardAmountPerProperty",
      "lastCumulativeHoldersRewardAmountPerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCumulativeHoldersRewardPrice(): BigInt {
    let result = super.call(
      "lastCumulativeHoldersRewardPrice",
      "lastCumulativeHoldersRewardPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCumulativeHoldersRewardPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCumulativeHoldersRewardPrice",
      "lastCumulativeHoldersRewardPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCumulativeHoldersRewardPricePerProperty(param0: Address): BigInt {
    let result = super.call(
      "lastCumulativeHoldersRewardPricePerProperty",
      "lastCumulativeHoldersRewardPricePerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCumulativeHoldersRewardPricePerProperty(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCumulativeHoldersRewardPricePerProperty",
      "lastCumulativeHoldersRewardPricePerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCumulativeRewardPrice(): BigInt {
    let result = super.call(
      "lastCumulativeRewardPrice",
      "lastCumulativeRewardPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCumulativeRewardPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCumulativeRewardPrice",
      "lastCumulativeRewardPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastLockedChangedCumulativeReward(): BigInt {
    let result = super.call(
      "lastLockedChangedCumulativeReward",
      "lastLockedChangedCumulativeReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastLockedChangedCumulativeReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastLockedChangedCumulativeReward",
      "lastLockedChangedCumulativeReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSameGlobalRewardAmount(): BigInt {
    let result = super.call(
      "lastSameGlobalRewardAmount",
      "lastSameGlobalRewardAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSameGlobalRewardAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSameGlobalRewardAmount",
      "lastSameGlobalRewardAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSameGlobalRewardTimestamp(): BigInt {
    let result = super.call(
      "lastSameGlobalRewardTimestamp",
      "lastSameGlobalRewardTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSameGlobalRewardTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSameGlobalRewardTimestamp",
      "lastSameGlobalRewardTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registryAddress(): Address {
    let result = super.call(
      "registryAddress",
      "registryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_registryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registryAddress",
      "registryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalLocked(): BigInt {
    let result = super.call("totalLocked", "totalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLocked", "totalLocked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLockedForProperty(param0: Address): BigInt {
    let result = super.call(
      "totalLockedForProperty",
      "totalLockedForProperty(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalLockedForProperty(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLockedForProperty",
      "totalLockedForProperty(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawByPosition(_tokenId: BigInt, _amount: BigInt): boolean {
    let result = super.call(
      "withdrawByPosition",
      "withdrawByPosition(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawByPosition(
    _tokenId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawByPosition",
      "withdrawByPosition(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class DepositToPositionCall extends ethereum.Call {
  get inputs(): DepositToPositionCall__Inputs {
    return new DepositToPositionCall__Inputs(this);
  }

  get outputs(): DepositToPositionCall__Outputs {
    return new DepositToPositionCall__Outputs(this);
  }
}

export class DepositToPositionCall__Inputs {
  _call: DepositToPositionCall;

  constructor(call: DepositToPositionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositToPositionCall__Outputs {
  _call: DepositToPositionCall;

  constructor(call: DepositToPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositToPropertyCall extends ethereum.Call {
  get inputs(): DepositToPropertyCall__Inputs {
    return new DepositToPropertyCall__Inputs(this);
  }

  get outputs(): DepositToPropertyCall__Outputs {
    return new DepositToPropertyCall__Outputs(this);
  }
}

export class DepositToPropertyCall__Inputs {
  _call: DepositToPropertyCall;

  constructor(call: DepositToPropertyCall) {
    this._call = call;
  }

  get _property(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositToPropertyCall__Outputs {
  _call: DepositToPropertyCall;

  constructor(call: DepositToPropertyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCapCall extends ethereum.Call {
  get inputs(): UpdateCapCall__Inputs {
    return new UpdateCapCall__Inputs(this);
  }

  get outputs(): UpdateCapCall__Outputs {
    return new UpdateCapCall__Outputs(this);
  }
}

export class UpdateCapCall__Inputs {
  _call: UpdateCapCall;

  constructor(call: UpdateCapCall) {
    this._call = call;
  }

  get _cap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCapCall__Outputs {
  _call: UpdateCapCall;

  constructor(call: UpdateCapCall) {
    this._call = call;
  }
}

export class WithdrawByPositionCall extends ethereum.Call {
  get inputs(): WithdrawByPositionCall__Inputs {
    return new WithdrawByPositionCall__Inputs(this);
  }

  get outputs(): WithdrawByPositionCall__Outputs {
    return new WithdrawByPositionCall__Outputs(this);
  }
}

export class WithdrawByPositionCall__Inputs {
  _call: WithdrawByPositionCall;

  constructor(call: WithdrawByPositionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawByPositionCall__Outputs {
  _call: WithdrawByPositionCall;

  constructor(call: WithdrawByPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
